FROM nginx:1.27.1

RUN  apt-get update && apt-get upgrade -y && apt-get install -y openssl curl nano


RUN mkdir -p /etc/nginx/ssl \
	&& openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
	-keyout /etc/nginx/ssl/server.key\
	-out    /etc/nginx/ssl/server.crt\
	-subj "/C=DE/ST=Baden-Wuerttemberg/L=Heilbronn/O=42Heilbronn/CN=qdo" \
	&& rm -rf /var/lib/apt/lists/*
# openssl x509 -in /etc/nginx/ssl/server.crt  -text -noout -to see subj

#Download + build Modsecurity
# RUN apt-get update && apt-get install bison build-essential ca-certificates curl dh-autoreconf doxygen -y \
# flex gawk git iputils-ping libcurl4-gnutls-dev libexpat1-dev libgeoip-dev liblmdb-dev \
# libpcre3-dev libssl-dev libtool libxml2 libxml2-dev libyajl-dev locales \
#        lua5.3-dev pkg-config wget zlib1g-dev libxslt1-dev libgd-dev 
# RUN cd /opt && git clone https://github.com/SpiderLabs/ModSecurity
# RUN cd /opt/ModSecurity && git submodule init && git submodule update && ./build.sh && ./configure
# RUN cd /opt/ModSecurity && make -j6 && make install

# RUN cd /opt &&\
# 	git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git && \
# 	wget http://nginx.org/download/nginx-1.27.1.tar.gz && \
# 	tar -xvzmf nginx-1.27.1.tar.gz

# RUN cd /opt/nginx-1.27.1 && ./configure --add-dynamic-module=../ModSecurity-nginx \
# 		--prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_v3_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -ffile-prefix-map=/data/builder/debuild/nginx-1.27.1/debian/debuild-base/nginx-1.27.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'
# RUN cd /opt/nginx-1.27.1 && make modules && cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules

# RUN cd /usr/share/ && \
# 	rm -rf /usr/share/modsecurity-crs && \
# 	git clone https://github.com/coreruleset/coreruleset /usr/local/modsecurity-crs &&\
# 	mv /usr/local/modsecurity-crs/crs-setup.conf.example /usr/local/modsecurity-crs/crs-setup.conf && \
# 	mv /usr/local/modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /usr/local/modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf

# RUN rm -rf /usr/share/modsecurity-crs &&\
# 	rm -rf /usr/local/modsecurity-crs &&\
# 	git clone https://github.com/coreruleset/coreruleset /usr/local/modsecurity-crs

# RUN mv /usr/local/modsecurity-crs/crs-setup.conf.example /usr/local/modsecurity-crs/crs-setup.conf &&\
# 	mv /usr/local/modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /usr/local/modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
# RUN mkdir -p /etc/nginx/modsec &&\
# 	cp /opt/ModSecurity/unicode.mapping /etc/nginx/modsec
# COPY modsecurity.conf /etc/nginx/modsec/modsecurity.conf
# COPY main.conf /etc/nginx/modsec/main.conf
# COPY nginx.conf /etc/nginx/nginx.conf
# RUN rm -rf /etc/nginx/conf.d/default.conf
COPY default.conf /etc/nginx/conf.d/default.conf

EXPOSE 443

CMD ["nginx", "-g", "daemon off;"]
